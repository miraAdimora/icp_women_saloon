type Error = variant {
  NotFound : record { msg : text };
  NotAuthorized : record { msg : text };
  BadRequest : record { msg : text };
};
type Result = variant { Ok : Saloon; Err : Error };
type Saloon = record {
  id : nat64;
  updated_at : opt nat64;
  owner : text;
  name : text;
  saloonservices : vec SaloonService;
  created_at : nat64;
  saloon_url : text;
  location : text;
};
type SaloonPayload = record { name : text; saloon_url : text; location : text };
type SaloonService = record {
  updated_at : opt nat64;
  service_name : text;
  service_description : text;
  created_at : nat64;
};
type ServicePayload = record {
  service_name : text;
  service_description : text;
};
service : {
  add_saloon : (SaloonPayload) -> (Result);
  add_services_saloon : (nat64, ServicePayload) -> (Result);
  delete_saloon : (nat64) -> (Result);
  delete_service_saloon : (nat64, text) -> (Result);
  get_saloon : (nat64) -> (Result) query;
  get_saloons : (nat64, nat64) -> (vec Saloon) query;
  search_by_location : (text) -> (vec Saloon) query;
  search_by_name : (text) -> (vec Saloon) query;
  update_saloon : (nat64, SaloonPayload) -> (Result);
}
